<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring源码分析(四):AOP</title>
    <url>/2019/10/29/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%9B%9B-AOP/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码分析(三):IoC 容器</title>
    <url>/2019/10/29/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%89-IoC%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="IoC-控制反转"><a href="#IoC-控制反转" class="headerlink" title="IoC(控制反转)"></a>IoC(控制反转)</h3><ul>
<li>含义：Java bean创建对象的控制权由程序移交给容器，就是由容器实例化、管理对象</li>
<li>对于IoC进一步了解，参考Martin Fowler2004年在<a href="https://martinfowler.com/articles/injection.html" target="_blank" rel="noopener">他的网站</a>上的论述</li>
</ul>
<h3 id="bean的解析"><a href="#bean的解析" class="headerlink" title="bean的解析"></a>bean的解析</h3><h3 id="bean的加载"><a href="#bean的加载" class="headerlink" title="bean的加载"></a>bean的加载</h3>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码分析(二):环境准备</title>
    <url>/2019/10/29/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%BA%8C-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h3 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a><a href="https://gradle.org/install/#helpful-information" target="_blank" rel="noopener">安装Gradle</a></h3><ul>
<li>Step1. Download</li>
<li>Step2. Unpack the distribution</li>
<li>Step3. Configure your system environment</li>
<li>Step4. Verify your installation</li>
</ul>
<a id="more"></a>

<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">安装Git</a></h3><h3 id="下载Spring"><a href="#下载Spring" class="headerlink" title="下载Spring"></a>下载Spring</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/spring-projects/spring-framework.git</span><br></pre></td></tr></table></figure>
<h3 id="源码转换"><a href="#源码转换" class="headerlink" title="源码转换"></a>源码转换</h3><p><img src="/images/spring-convert.png" alt="spring源码转换"><br>进入spring目录，找到import-into-idea.md，按步骤转换</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码分析(一):概述</title>
    <url>/2019/10/29/Spring%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E4%B8%80-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="Spring概述"><a href="#Spring概述" class="headerlink" title="Spring概述"></a>Spring概述</h3><h4 id="1-1-Spring是什么"><a href="#1-1-Spring是什么" class="headerlink" title="1.1 Spring是什么"></a>1.1 Spring是什么</h4><p>Spring是一个开源的轻量级Java SE/Java EE开发应用框架，其目的是用于简化企业级应用程序开发。</p>
<ul>
<li>开源是指Spring<strong><a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">源码</a></strong>托管在github上；</li>
<li>轻量级是指使用简单、依赖少、资源占用少、非入侵性，是相对于重量级来说的；</li>
<li>根据Java面向对象思想，应用程序就是一组相互协作的对象。在传统应用程序开发中，除了开发业务逻辑外，还要把大量精力放在如何使这些对象协作来完成所需功能，Spring框架出现后，就由他来帮我们创建对象及管理这些对象之间的依赖关系，从而简化了应用程序开发。</li>
</ul>
<h4 id="1-2-Spring有哪些功能"><a href="#1-2-Spring有哪些功能" class="headerlink" title="1.2 Spring有哪些功能"></a>1.2 Spring有哪些功能</h4><ul>
<li>Spring能帮我们根据配置文件创建及组装对象之间的依赖关系</li>
<li>Spring 面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制</li>
<li>Spring能非常简单的帮我们管理数据库事务</li>
<li>Spring还提供了与第三方数据访问框架（如Hibernate、JPA）无缝集成，而且自己也提供了一套JDBC访问模板，来方便数据库访问</li>
<li>Spring还提供与第三方Web（如Struts、JSF）框架无缝集成，而且自己也提供了一套Spring MVC框架，来方便web层搭建</li>
<li>Spring能方便的与Java EE（如Java Mail、任务调度）整合，与更多技术整合（比如缓存框架）</li>
</ul>
<h4 id="1-3-如何学习Spring"><a href="#1-3-如何学习Spring" class="headerlink" title="1.3 如何学习Spring"></a>1.3 如何学习Spring</h4><ul>
<li>首先，要明确Spring是什么，能帮我们做些什么，再参考官网自己写个demo或者debug下Spring源码中的例子，这样就基本知道怎么使用Spring了。</li>
<li>其次，IoC容器及AOP是Spring的核心，尤其是IoC容器，其他所有技术都是基于它实现的。AOP意思是面向切面编程，提供从另一个角度来考虑程序结构以完善面向对象编程（相对于OOP），即可以通过在编译期间、装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能的一种技术。IoC和AOP是Spring基础，要想学好Spring，必须打牢基础。</li>
</ul>
<h3 id="Spring基础"><a href="#Spring基础" class="headerlink" title="Spring基础"></a>Spring基础</h3><h4 id="2-1-Spring架构图"><a href="#2-1-Spring架构图" class="headerlink" title="2.1 Spring架构图"></a>2.1 Spring架构图</h4><p><img src="/images/spring-framwork-modules.png" alt="spring源码转换"></p>
<p>Spring框架是一个分层架构，分为大约20个模块，这些模块按照分层被总结为以下5个部分。</p>
<p>(1) Core Container<br>核心容器包含Core、Beans、Context和Expression Language模块<br>Core和Beans模块是框架的基础部分，提供IoC和依赖注入特性。这里的基础概念是BeanFactory，它提供对Factory模式的经典实现来消除对程序性单例模式的需要，并真正地允许你从程序逻辑中分离出依赖关系和配置。</p>
<ul>
<li>Core模块主要包含Spring框架基本的核心工具类。</li>
<li>Beans模块是所有应用都要用到的，它包含访问配置文件、创建和管理bean以及进行IoC/DI操作相关的所有类。</li>
<li>Context模块构建于Core和Beans模块基础之上，提供了一种类似JNDI注册器的框架式对象访问方法。Context模块继承了Beans的特性，为Spring核心提供了大量扩展，添加了对国际化（例如资源绑定）、事件传播、资源加载和对Context透明创建的支持。Context同时也支持J2EE的一些特性，例如EJB、JMX和基础的远程处理。ApplicationContext接口是Context模块的关键。</li>
<li>Expression Language模块提供了一个强大的表达式语言用于在运行时查询和操作对象。它是JSP2.1规范中定义的unife expression language的一个扩展。该语言支持设置/获取属性的值，属性的分配，方法的调用，访问数组上下文、容器和索引器、逻辑和算数运算符、命名变量以及从Spring的IoC容器中根据名称检索对象。它也支持list投影、选择和一般的list聚合。</li>
</ul>
<p>(2) Data Access/Integration<br>Data Access/Integration层包含JDBC、ORM、OXM、JMS和Transaction</p>
<ul>
<li>JDBC模块提供了一个JDBC抽象层，它可以消除冗长的JDBC编码和解析数据库厂商特有的错误代码。这个模块包含了Spring对JDBC数据访问进行封装的所有类。</li>
<li>ORM模块为流行的对象-关系映射API，如JPA、JDO、Hibernate、iBatis等，提供了一个交互。利用ORM封装包，可以混合使用所有Spring提供的特性进行O/R映射。如前边提到的简单声明性事务管理。</li>
<li>OXM模块提供了一个对Object/XML映射实现的抽象层，Object/XML映射实现包括JAXB、Castor、XMLBeans、JiBX和XStream。</li>
<li>JMS（Java Messaging Service）模块主要包含了一些生产和消费消息的特性。</li>
<li>Transaction模块支持编程和声明性的事务管理，这些事务管理必须实现特定的接口，并且对所有的POJO都适用。</li>
</ul>
<p>(3) Web<br>Web上下文模块建立在应用程序上下文模块之上，为基于Web的应用程序提供了上下文。所以，Spring框架支持与Jakarta Struts 的集成。Web模块还简化了处理多部分请求一级将请求参数绑定到域对象的工作。Web层包含了Web、Web-Servlet、Web-Struts和Web-Porlet模块：</p>
<ul>
<li>Web模块提供了基础的面向Web的集成特性。例如，多文件上传、使用servlet listeners初始化IoC容器以及一个面向Web的应用上下文。它还包含Spring远程支持中Web的相关部分。</li>
<li>Web-Servlet模块包含Spring的model-view-controller（MVC）实现。Spring的MVC框架使得模型范围内的代码和web forms之间能够清楚地分离开来，并与Spring框架的其他特性集成在一起。</li>
<li>Web-Struts模块提供了对Struts的支持，使得类Spring应用中能够与一个典型的Struts Web层集成在一起。注意，该支持在Spring3.0中是deprecated的。</li>
<li>Web-Porlet模块提供了用于Portlet环境和Web-Servlet模块的MVC的实现。</li>
</ul>
<p>(4) AOP<br>  AOP模块提供了一个符合AOP联盟标准的面向切面编程的实现，它让你可以定义例如方法拦截器和切点，从而将逻辑代码分开，降低它们之间的耦合性。利用source-level的元数据功能，还可以将各种行为信息合并到你的代码中，这有点像.Net技术中的attribute概念。<br>  通过配置管理特性，Spring AOP模块直接将面向切面的编程功能集成到了Spring框架中，所以可以很容易地使Spring框架管理的任何对象支持AOP。Spring AOP模块为基于Spring的应用程序中的对象提供了事务管理服务。通过使用Spring AOP，不用依赖EJB组件，就可以将声明性事务管理集成到应用程序中。</p>
<ul>
<li>Aspects模块提供了对AspectJ的集成支持</li>
<li>Instrumentation模块提供了class instrumentation支持和classloader实现，使得可以在特定的应用服务器上使用。</li>
</ul>
<p>(5) Test<br>Test模块支持使用JUnit和TestNG对Spring组件进行测试。</p>
<h4 id="2-2-版本历史"><a href="#2-2-版本历史" class="headerlink" title="2.2 版本历史"></a>2.2 版本历史</h4><ul>
<li>第一版由 Rod Johnson 开发，并在2002年10月发布在 Expert One-on-One J2EE Design and Development 一书中</li>
<li>2004年3月发布了里程碑的版本1.0</li>
<li>2006年10月发布Spring 2.0</li>
<li>2007年11月 Spring 2.5</li>
<li>2009年12月 Spring 3.0</li>
<li>2011年 Spring 3.1</li>
<li>2013年11月 Spring 3.2.5</li>
<li>2013年12月发布了4.0版本 [1]</li>
<li>2017年9月 Spring Framework正式发布了5.0版本 [2]</li>
</ul>
<p>[1]:Spring 4.0 版本中增加了对 Java SE 8, Groovy 2, Java EE 7 的一些方面以及 WebSocket 的支持<br>[2]:引入了 Spring WebFlux，一个高性能、响应式、异步的 Web 框架；重点加强了对函数式编程、响应式程序设计（reactive programming）的支持能力，是一个非常大的进步</p>
<p>参考：<br>《Spring源码深度解析》<br><a href="https://www.docs4dev.com/docs/zh/spring-framework/4.3.21.RELEASE/reference" target="_blank" rel="noopener">Spring中文文档</a><br><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/index.html" target="_blank" rel="noopener">Spring英文文档</a></p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + github搭建个人博客</title>
    <url>/2019/09/26/hexo/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li>检查安装<br>git -v<br>node -v</li>
<li>安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a></li>
<li>安装 <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node.js</a></li>
</ul>
<a id="more"></a>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">安装hexo</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo init hexo</span><br><span class="line">$ cd hexo</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<h3 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h3><ul>
<li>登录github账号创建仓库，命名：username.github.io<br>注：username为github用户名，例：xingly.github.io</li>
<li>GitHub 添加 SSH key</li>
<li>进入hexo目录，修改站点配置文件(_config.yml)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xingly/xingly.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<h3 id="主题NexT"><a href="#主题NexT" class="headerlink" title="主题NexT"></a><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">主题NexT</a></h3><h3 id="hexo-admin安装"><a href="#hexo-admin安装" class="headerlink" title="hexo-admin安装"></a>hexo-admin安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd hexo</span><br><span class="line">$ npm install --save hexo-admin</span><br></pre></td></tr></table></figure>
<h3 id="hexo-deployer-git安装"><a href="#hexo-deployer-git安装" class="headerlink" title="hexo-deployer-git安装"></a>hexo-deployer-git安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd hexo</span><br><span class="line">$ npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<h3 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a><a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">hexo常用命令</a></h3>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
